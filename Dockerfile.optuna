# Multi-stage Docker build for Optuna optimization
# Optimized for CPU-intensive hyperparameter optimization workloads

ARG PYTHON_VERSION=3.11
FROM python:${PYTHON_VERSION}-slim as builder

# Build stage - Install dependencies
WORKDIR /build

# Install system dependencies for building Python packages
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files
COPY requirements.txt pyproject.toml ./

# Generate and install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir optuna optuna-dashboard

# Runtime stage - Slim production image
FROM python:${PYTHON_VERSION}-slim as runtime

# Install runtime system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create application user for security
RUN groupadd -r mechexo && useradd -r -g mechexo -d /app -s /bin/bash mechexo

# Set working directory
WORKDIR /app

# Copy Python environment from builder
COPY --from=builder /usr/local/lib/python*/site-packages /usr/local/lib/python*/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=mechexo:mechexo . /app/

# Create directories for data persistence
RUN mkdir -p /app/studies /app/factors /app/data /app/config && \
    chown -R mechexo:mechexo /app

# Switch to non-root user
USER mechexo

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Expose ports (for dashboard service)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import sys; sys.exit(0)"

# Default command (can be overridden)
CMD ["python", "-m", "mech_exo.cli", "optuna-run", "--n-trials", "10", "--n-jobs", "1"]